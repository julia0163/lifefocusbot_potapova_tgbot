import logging
import os
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TOKEN")
CHANNEL_USERNAME = "@potapova_psy"
SOURCE_CHAT_ID = 416561840
PRACTICE_MESSAGE_ID = 192
INSTRUCTION_MESSAGE_ID = 194
PORT = int(os.environ.get('PORT', 10000))  # Render –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ä—Ç 10000

app = Flask(__name__)

async def check_subscription(user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return False

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–∞–∫—Ç–∏–∫ –¥–ª—è –ñ–ò–ó–ù–ò üåø</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏:\n"
        "‚Ä¢ –ì–Ω–µ–≤–æ–º –∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ–º\n"
        "‚Ä¢ –¢—Ä–µ–≤–æ–≥–æ–π –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ–º\n"
        "‚Ä¢ –ê–ø–∞—Ç–∏–µ–π –∏ —É—Å—Ç–∞–ª–æ—Å—Ç—å—é\n\n"
        "<b>–°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–∞:</b>\n"
        "üß† –ü—Ä–∞–∫—Ç–∏–∫–∞ <b>¬´–í—Ç–æ—Ä–∏—á–Ω—ã–µ –≤—ã–≥–æ–¥—ã¬ª</b> - –ø–æ–º–æ–≥–∞–µ—Ç —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–∫—Ä—ã—Ç—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏ –∏ –≤–∞—à–∏–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º."
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_sub")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="show_instruction")]
    ]
    await update.message.reply_text(
        welcome_text + "\n\nüéß <b>–ê—É–¥–∏–æ-–ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª</b>",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="HTML"
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    try:
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É –Ω–∞ callback
        user_id = query.from_user.id

        if query.data == "check_sub":
            subscribed = await check_subscription(user_id, context)
            if subscribed:
                await query.message.reply_text("‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –î–æ—Å—Ç—É–ø –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ –æ—Ç–∫—Ä—ã—Ç</b>", parse_mode="HTML")
                await context.bot.copy_message(
                    chat_id=query.message.chat_id,
                    from_chat_id=SOURCE_CHAT_ID,
                    message_id=PRACTICE_MESSAGE_ID
                )
            else:
                keyboard = [
                    [InlineKeyboardButton("üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME[1:]}")],
                    [InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_sub")]
                ]
                await query.message.reply_text(
                    "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="HTML"
                )
        
        elif query.data == "show_instruction":
            await context.bot.copy_message(
                chat_id=query.message.chat_id,
                from_chat_id=SOURCE_CHAT_ID,
                message_id=INSTRUCTION_MESSAGE_ID
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ button_handler: {e}")

async def handle_any_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /start")

@app.route('/')
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route('/webhook', methods=['POST'])
async def webhook():
    if request.method == "POST":
        json_data = request.get_json()
        update = Update.de_json(json_data, application.bot)
        await application.update_queue.put(update)
    return "ok"

def main():
    global application
    application = Application.builder().token(TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.ALL, handle_any_message))

    # Webhook —Ç–æ–ª—å–∫–æ –Ω–∞ Render
    if 'RENDER' in os.environ:
        webhook_url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/webhook"
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=webhook_url,
            drop_pending_updates=True
        )
    else:
        application.run_polling()

if __name__ == '__main__':
    main()
